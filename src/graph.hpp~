#include "igraph.h"
#include "stat.hpp"

class Graph {
public:
	void SF2ER (int N, double alpha, int param, bool isDirected) {
		int i, j, k, m;
		vector<double> p (2*param+1, isDirected); //quantidade de arestas PA
		long long etot = 0, acc;
		ecount = vector<int>(N,0);
		for (i = 0; i < 2*param+1; i++)
			for (j = i+1; j < 2*param+1; j++) {
				igraph_add_edge (graph, i, j);
				p[j]++;
				if (!isDirected)	p[i]++;
				etot += 2;
			}
		for (; i < N; i++) {			
			for (m = param; m > 0; m--) {
				if (Statistic::unif() < alpha) { //ER
					j = rand()%(N-1);
					if (j >= i)	j++;
					igraph_add_edge (graph, i, j);
				} else { //SW
					k = rand()%(etot-ecount[i]);
					acc = 0;
					for (j = 0; j < N; j++) {
						if (i == j)	continue;
						if (acc+ecount[j] >= k) {
							igraph_add_edge (graph, i, j);
							p[j]++;
							if (!isDirected)	p[i]++;
							etot += 2;
							break;
						}
						acc+=p[j];
					}
				}
			}
		}
	}
	static void barabasi_game(igraph_t *graph, int population, int param, bool isDirected) {
		vector<double> p (2*param+1, isDirected);
		vector<int> id;
		int i, j, from, to;
		igraph_empty(graph, population, isDirected);
		for (i = 0; i < 2*param+1; i++) {
			for (j = i+1; j < 2*param+1; j++) {
				from = j;
				to = i;
				igraph_add_edge (graph, from, to);
				p[to]++;
				if (!isDirected) p[from]++;
			}
		}
		int k = 0;
		for (i = 0; i < 2*param+1; i++)	k += p[i];
		fprintf (stderr, " awawa %lf\n", k/(double)(2*param+1));
		for (; i < population; i++) {
			Statistic::sample(p, param, id);
			p.push_back(isDirected);
			for (j = 0; j < param; j++) {
				from = i;
				to = id[j];
				igraph_add_edge (graph, from, to);
				p[to]++;
				if (!isDirected)	p[from]++;
			}
		}
		k = 0;
		for (i = 0; i < population; i++)	k += p[i];
	}
};
